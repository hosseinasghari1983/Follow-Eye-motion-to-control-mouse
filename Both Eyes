function varargout = facecamvid(varargin)
% FACECAMVID MATLAB code for facecamvid.fig
%      FACECAMVID, by itself, creates a new FACECAMVID or raises the existing
%      singleton*.
%
%      H = FACECAMVID returns the handle to a new FACECAMVID or the handle to
%      the existing singleton*.
%
%      FACECAMVID('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in FACECAMVID.M with the given input arguments.
%
%      FACECAMVID('Property','Value',...) creates a new FACECAMVID or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before facecamvid_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to facecamvid_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
 
% Edit the above text to modify the response to help facecamvid
 
% Last Modified by GUIDE v2.5 24-Jan-2017 08:16:51
 
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @facecamvid_OpeningFcn, ...
                   'gui_OutputFcn',  @facecamvid_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end
 
if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
end
 
 
% --- Executes just before facecamvid is made visible.
function facecamvid_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to facecamvid (see VARARGIN)
handles.FaceDetector = vision.CascadeObjectDetector('FrontalFaceLBP');
handles.EyeDetector = vision.CascadeObjectDetector('EyePairBig');
handles.loop = false;
handles.debug_Mode=1;
% Set up data gathering condition
%handles.gather = false;
 
% Choose default command line output for facecamvid
handles.output = hObject;
 
% Update handles structure
guidata(hObject, handles);
 
% UIWAIT makes facecamvid wait for user response (see UIRESUME)
% uiwait(handles.figure1);
end
 
 
% --- Outputs from this function are returned to the command line.
function varargout = facecamvid_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
 
% Get default command line output from handles structure
varargout{1} = handles.output;
end
 
 
% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Create the webcam object.

isTextStart = strcmp(hObject.String,'Start');
isTextStop = strcmp(hObject.String,'Stop');

if isTextStart
    hObject.String = 'Stop';
    cam = webcam();
    handles.loop = true; %Create stop_now in the handles structure
    guidata(hObject,handles);  %Update the GUI data
    marker = false;
    %j = 0;
    oneCounterR = 0;
    twoCounterR = 0;
    threeCounterR = 0;
    fourCounterR = 0;
    fiveCounterR = 0;
    sixCounterR = 0;
    sevenCounterR = 0;
    eightCounterR = 0;
    oneCounterL = 0;
    twoCounterL = 0;
    threeCounterL = 0;
    fourCounterL = 0;
    fiveCounterL = 0;
    sixCounterL = 0;
    sevenCounterL = 0;
    eightCounterL = 0;
    aColR = [];
    aRowR = [];
    mColR = [];
    mRowR = [];
    aColL = [];
    aRowL = [];
    mColL = [];
    mRowL = [];
    import java.awt.Robot;
    import java.awt.event.*;
    robot=Robot ();
    pos=get(0,'Pointerlocation');
    
    videoFrame = rgb2gray((snapshot(cam)));
    %Detect face
    Face = step(handles.FaceDetector, videoFrame);
    cVFrame = imcrop(videoFrame, Face(1,:));
    EyesFrame = step(handles.EyeDetector, cVFrame);
    check = size(EyesFrame);
    if check(1) > 1
        EyesFrame = EyesFrame(2,:);
    end
    
    while handles.loop
        tic;
        %pause(0.25)
        for k=1:3
            videoFrame = rgb2gray((snapshot(cam)));
            cVFrame = imcrop(videoFrame, Face(1,:));
            EyesBox = imcrop(videoFrame, EyesFrame(1,:));
            %Crop Right Eye
            EyesBox1 = EyesFrame;
            EyesBox1(3) = EyesBox1(3)/2;
            secCrop = EyesBox1;
            space = (secCrop(3));
            secCrop(1) = secCrop(1) + 0.15 * space;
            secCrop(3) = secCrop(3) - 0.5 * space;
            secCrop(2)= secCrop(2) + 0.25 * secCrop(4);
            secCrop(4) = secCrop(4) * 0.4;
            videoRightEye = imcrop(cVFrame,secCrop);
            %Interpolation, image resize      
            imClass = class(videoRightEye);
            [xR yR] = meshgrid(1:size(videoRightEye,2), 1:size(videoRightEye,1));
            [xi yi] = meshgrid(1:0.3:size(videoRightEye,2), 1:0.3:size(videoRightEye,1));
            imClass;
            videoRightEye = cast(interp2(xR,yR,double(videoRightEye),xi,yi,'linear'),imClass);
            vRightEye = videoRightEye;
            %Crop left eye
            secCrop = EyesBox1;
            secCrop(1) = secCrop(1) + space+0.3*space;
            secCrop(3) = secCrop(3) - 0.5 *space;
            secCrop(2)=secCrop(2)+ 0.25*secCrop(4);
            secCrop(4) = secCrop(4) *0.4;
            videoLeftEye = imcrop(cVFrame,secCrop);
            %Interpolation, image resize
            try
                imClass = class(videoLeftEye);
                [xR yR] = meshgrid(1:size(videoLeftEye,2), 1:size(videoLeftEye,1));
                [xi yi] = meshgrid(1:0.3:size(videoLeftEye,2), 1:0.3:size(videoLeftEye,1));
                imClass;
                videoLeftEye = cast(interp2(xR,yR,double(videoLeftEye),xi,yi,'linear'),imClass);
                vLeftEye = videoLeftEye;
            catch
                vLeftEye = videoLeftEye;
            end
            vLeftEye = videoLeftEye;
            %normalizes gray scale
            darkCol = min(min(videoRightEye));
            videoRightEye = videoRightEye - darkCol;
            videoRightEye(find(videoRightEye>12)) = 255;
            darkCol = min(min(videoLeftEye));
            videoLeftEye = videoLeftEye - darkCol;
            videoLeftEye(find(videoLeftEye>12)) = 255;
            %make data double precision
            z0R = double(videoRightEye);
            z0L = double(videoLeftEye);
            %average three frames
            if k==1
                zR=z0R;
                zL=z0L;
            else
                z0R=imresize(z0R,size(zR));
                zR=(zR+z0R)/2;
                z0L=imresize(z0L,size(zL));
                zL=(zL+z0L)/2;
                if k==3
                    [xR yR]=ndgrid(1:size(zR,1),1:size(zR,2));
                    [xL yL]=ndgrid(1:size(zL,1),1:size(zL,2));
                    %turns x,y, and z into single column vectors so that the fit function
                    %can be used to plot the data
                    [x1R,y1R,z1R] = prepareSurfaceData(xR,yR,zR);
                    [x1L,y1L,z1L] = prepareSurfaceData(xL,yL,zL);
                    %plots the data using curve fitting
                    sfR=fit([x1R,y1R],z1R,'poly25');
                    sfL=fit([x1L,y1L],z1L,'poly25');
                    zR=sfR(xR,yR);
                    zL=sfL(xL,yL);
                    %sets the corners to 255
                    zR(find(xR<0.2*size(xR,1) | yR<0.4*size(yR,1)| xR>0.8*size(xR,1) | yR>0.8*size(yR,2)))=255;
                    zL(find(xL<0.2*size(xL,1) | yL<0.4*size(yL,1)| xL>0.8*size(xL,1) | yL>0.8*size(yL,2)))=255;
                    %find minimum of the curve
                    [rowR,colR]=find(zR==min(min(zR)));
                    [rowL,colL]=find(zL==min(min(zL)));
                    marker = true;
                    %normalized to 100pxs regardless of image resolution
                    cFrameSize = size(vRightEye);
                    heightR = cFrameSize(1);
                    widthR = cFrameSize(2);
                    normalWidth = 1920;
                    normalHeight = 1080;
                    wRatioR = normalWidth/widthR;
                    hRatioR = normalHeight/heightR;
                    normalColR = wRatioR*colR;
                    normalRowR = hRatioR*rowR;
                    aColR = [aColR, normalColR];
                    aRowR = [aRowR, normalRowR];
                    %Left eye
                    cFrameSize = size(vLeftEye);
                    heightL = cFrameSize(1);
                    widthL = cFrameSize(2);
                    wRatioL = normalWidth/widthL;
                    hRatioL = normalHeight/heightL;
                    normalColL = wRatioL*colL;
                    normalRowL = hRatioL*rowL;
                    aColL = [aColL, normalColL];
                    aRowL = [aRowL, normalRowL];
                    %insert marker cluster
                    for d=1:length(aColR)
                        mColR = round(aColR./wRatioR);
                        mRowR = round(aRowR./hRatioR);
                        try
                            vRightEye(mRowR(d),mColR(d))=255;
                        catch
                        end
                    end
                    for n=1:length(aColL)
                        mColL = round(aColL./wRatioL);
                        mRowL = round(aRowL./hRatioL);
                        try
                            vLeftEye(mRowL(n),mColL(n))= 255;
                        catch
                        end
                    end
                    axes(handles.axes2);
                    cla(handles.axes2);
                    %display image on axes 2
                    imagesc(fliplr(vRightEye)); colormap gray
                    yLinePos1 = round(3*heightR/5);
                    yLinePos2 = round(2*heightR/5);
                    xLinePos1 = round(3*widthR/5);
                    xLinePos2 = round(2*widthR/5);
                    %xLine needs to have a coeff such that XLine width coeff + XLine coeff = 1
                    %if xLinePos = round(3*width/5), then mCol(d)>(2*xLinePos/3), 2*xLinePos/3 = 2*width/5
                    %2*width/5 + 3*width/5 = width
                    if (mColR(d)>xLinePos1)&&(mRowR(d)<yLinePos2)
                        oneCounterR = oneCounterR + 1;
                        twoCounterR = 0;
                        threeCounterR = 0;
                        fourCounterR = 0;
                        fiveCounterR = 0;
                        sixCounterR = 0;
                        sevenCounterR = 0;
                        eightCounterR = 0;
                        if oneCounterR >= 4
                            xP = [0 xLinePos2 xLinePos2 0];
                            yP = [0 0 yLinePos2 yLinePos2];
                            patch(xP, yP, 'r');    
                            pos = [pos(1)-20,pos(2)-20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)<=xLinePos2)&&(mRowR(d)<yLinePos2) 
                        twoCounterR = twoCounterR + 1;
                        oneCounterR = 0;
                        threeCounterR = 0;
                        fourCounterR = 0;
                        fiveCounterR = 0;
                        sixCounterR = 0;
                        sevenCounterR = 0;
                        eightCounterR = 0;
                        if twoCounterR >= 4
                            xP = [xLinePos1 (widthR+1) (widthR+1) xLinePos1];
                            yP = [0 0 yLinePos2 yLinePos2];
                            patch(xP, yP, 'r');
                            pos = [pos(1)+20,pos(2)-20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)<=xLinePos2)&&(mRowR(d)>=yLinePos1)
                        threeCounterR = threeCounterR + 1;
                        twoCounterR = 0;
                        oneCounterR = 0;
                        fourCounterR = 0;
                        fiveCounterR = 0;
                        sixCounterR = 0;
                        sevenCounterR = 0;
                        eightCounterR = 0;
                        if threeCounterR >= 4
                            xP = [xLinePos1 (widthR+1) (widthR+1) xLinePos1];
                            yP = [yLinePos1 yLinePos1 (heightR+1) (heightR+1)];
                            patch(xP, yP, 'r');
                            pos = [pos(1)+20,pos(2)+20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)>xLinePos1)&&(mRowR(d)>=yLinePos1)
                        fourCounterR = fourCounterR + 1;
                        twoCounterR = 0;
                        threeCounterR = 0;
                        oneCounterR = 0;
                        fiveCounterR = 0;
                        sixCounterR = 0;
                        sevenCounterR = 0;
                        eightCounterR = 0;
                        if fourCounterR >= 4
                            xP = [0 xLinePos2 xLinePos2 0];
                            yP = [yLinePos1 yLinePos1 (heightR+1) (heightR+1)];
                            patch(xP, yP, 'r');
                            pos = [pos(1)-20,pos(2)+20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)>xLinePos1)&&(mRowR(d)>=yLinePos2)&&(mRowR(d)<yLinePos1)
                        fiveCounterR = fiveCounterR + 1;
                        eightCounterR=0;
                        fourCounterR = 0;
                        sevenCounterR = 0;
                        sixCounterR = 0;
                        twoCounterR = 0;
                        threeCounterR = 0;
                        oneCounterR = 0;
                        if fiveCounterR >= 4
                            xP = [0 xLinePos2 xLinePos2 0];
                            yP = [yLinePos2 yLinePos2 yLinePos1 yLinePos1];
                            patch(xP, yP, 'r');
                            pos = [pos(1)-20,pos(2)];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)<=xLinePos1)&&(mColR(d)>xLinePos2)&&(mRowR(d)<yLinePos2)
                        sixCounterR = sixCounterR + 1;
                        twoCounterR = 0;
                        threeCounterR = 0;
                        fourCounterR = 0;
                        fiveCounterR = 0;
                        oneCounterR = 0;
                        sevenCounterR = 0;
                        eightCounterR = 0;
                        if sixCounterR >= 4
                            xP = [xLinePos2 xLinePos1 xLinePos1 xLinePos2];
                            yP = [0 0 yLinePos2 yLinePos2];
                            patch(xP, yP, 'r');       
                            pos = [pos(1),pos(2)-20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)<=xLinePos2)&&(mRowR(d)>=yLinePos2)&&(mRowR(d)<yLinePos1)
                        sevenCounterR = sevenCounterR + 1;
                        eightCounterR=0;
                        fourCounterR = 0;
                        fiveCounterR = 0;
                        sixCounterR = 0;
                        twoCounterR = 0;
                        threeCounterR = 0;
                        oneCounterR = 0;
                        if sevenCounterR >= 4
                            xP = [xLinePos1 (widthR+1) (widthR+1) xLinePos1];
                            yP = [yLinePos2 yLinePos2 yLinePos1 yLinePos1];
                            patch(xP, yP, 'r');
                            pos = [pos(1)+20,pos(2)];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColR(d)<=xLinePos1)&&(mColR(d)>xLinePos2)&&(mRowR(d)>=yLinePos1)
                        eightCounterR = eightCounterR + 1;
                        twoCounterR = 0;
                        threeCounterR = 0;
                        fourCounterR = 0;
                        fiveCounterR = 0;
                        sixCounterR = 0;
                        sevenCounterR = 0;
                        oneCounterR = 0;
                        if eightCounterR >= 4
                            xP = [xLinePos2 xLinePos1 xLinePos1 xLinePos2];
                            yP = [yLinePos1 yLinePos1 (heightR+1) (heightR+1)];
                            patch(xP, yP, 'r'); 
                            pos = [pos(1),pos(2)+20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    else
                         xP = [xLinePos2 xLinePos1 xLinePos1 xLinePos2];
                         yP = [yLinePos2 yLinePos2 yLinePos1 yLinePos1];
                         patch(xP, yP, 'r'); 

                    end
                    xL1 = get(gca,'XLim');
                    line(xL1,[round(2*heightR/5) round(2*heightR/5)],'Color','r');
                    line(xL1,[round(3*heightR/5) round(3*heightR/5)],'Color','r');
                    yL = get(gca,'YLim');
                    line([round(2*widthR/5) round(2*widthR/5)],yL,'Color','r');
                    line([round(3*widthR/5) round(3*widthR/5)],yL,'Color','r');
                    %Sample Grid
                    grid on;
                    handles.axes2.GridColor = 'w';
                    axes(handles.axes4);
                    cla(handles.axes4);
                    %display image on axes 2
                    imagesc(fliplr(vLeftEye)); colormap gray
                    %xLine needs to have a coeff such that XLine width coeff + XLine coeff = 1
                    %if xLinePos = round(3*width/5), then mCol(d)>(2*xLinePos/3), 2*xLinePos/3 = 2*width/5
                    %2*width/5 + 3*width/5 = width
                    if (mColL(d)>xLinePos1)&&(mRowL(d)<yLinePos2)
                        oneCounterL = oneCounterL + 1;
                        twoCounterL = 0;
                        threeCounterL = 0;
                        fourCounterL = 0;
                        fiveCounterL = 0;
                        sixCounterL = 0;
                        sevenCounterL = 0;
                        eightCounterL = 0;
                        if oneCounterL >= 4
                            xP = [0 xLinePos2 xLinePos2 0];
                            yP = [0 0 yLinePos2 yLinePos2];
                            patch(xP, yP, 'r');    
                            pos = [pos(1)-20,pos(2)-20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)<=xLinePos2)&&(mRowL(d)<yLinePos2) 
                        twoCounterL = twoCounterL + 1;
                        oneCounterL = 0;
                        threeCounterL = 0;
                        fourCounterL = 0;
                        fiveCounterL = 0;
                        sixCounterL = 0;
                        sevenCounterL = 0;
                        eightCounterL = 0;
                        if twoCounterL >= 4
                            xP = [xLinePos1 (widthL+1) (widthL+1) xLinePos1];
                            yP = [0 0 yLinePos2 yLinePos2];
                            patch(xP, yP, 'r');
                            pos = [pos(1)+20,pos(2)-20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)<=xLinePos2)&&(mRowL(d)>=yLinePos1)
                        threeCounterL = threeCounterL + 1;
                        twoCounterL = 0;
                        oneCounterL = 0;
                        fourCounterL = 0;
                        fiveCounterL = 0;
                        sixCounterL = 0;
                        sevenCounterL = 0;
                        eightCounterL = 0;
                        if threeCounterL >= 4
                            xP = [xLinePos1 (widthL+1) (widthL+1) xLinePos1];
                            yP = [yLinePos1 yLinePos1 (heightL+1) (heightL+1)];
                            patch(xP, yP, 'r');
                            pos = [pos(1)+20,pos(2)+20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)>xLinePos1)&&(mRowL(d)>=yLinePos1)
                        fourCounterL = fourCounterL + 1;
                        twoCounterL = 0;
                        threeCounterL = 0;
                        oneCounterL = 0;
                        fiveCounterL = 0;
                        sixCounterL = 0;
                        sevenCounterL = 0;
                        eightCounterL = 0;
                        if fourCounterL >= 4
                            xP = [0 xLinePos2 xLinePos2 0];
                            yP = [yLinePos1 yLinePos1 (heightL+1) (heightL+1)];
                            patch(xP, yP, 'r');
                            pos = [pos(1)-20,pos(2)+20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)>xLinePos1)&&(mRowL(d)>=yLinePos2)&&(mRowL(d)<yLinePos1)
                        fiveCounterL = fiveCounterL + 1;
                        eightCounterL=0;
                        fourCounterL = 0;
                        sevenCounterL = 0;
                        sixCounterL = 0;
                        twoCounterL = 0;
                        threeCounterL = 0;
                        oneCounterL = 0;
                        if fiveCounterL >= 4
                            xP = [0 xLinePos2 xLinePos2 0];
                            yP = [yLinePos2 yLinePos2 yLinePos1 yLinePos1];
                            patch(xP, yP, 'r');
                            pos = [pos(1)-20,pos(2)];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)<=xLinePos1)&&(mColL(d)>xLinePos2)&&(mRowL(d)<yLinePos2)
                        sixCounterL = sixCounterL + 1;
                        twoCounterL = 0;
                        threeCounterL = 0;
                        fourCounterL = 0;
                        fiveCounterL = 0;
                        oneCounterL = 0;
                        sevenCounterL = 0;
                        eightCounterL = 0;
                        if sixCounterL >= 4
                            xP = [xLinePos2 xLinePos1 xLinePos1 xLinePos2];
                            yP = [0 0 yLinePos2 yLinePos2];
                            patch(xP, yP, 'r');       
                            pos = [pos(1),pos(2)-20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)<=xLinePos2)&&(mRowL(d)>=yLinePos2)&&(mRowL(d)<yLinePos1)
                        sevenCounterL = sevenCounterL + 1;
                        eightCounterL=0;
                        fourCounterL = 0;
                        fiveCounterL = 0;
                        sixCounterL = 0;
                        twoCounterL = 0;
                        threeCounterL = 0;
                        oneCounterL = 0;
                        if sevenCounterL >= 4
                            xP = [xLinePos1 (widthL+1) (widthL+1) xLinePos1];
                            yP = [yLinePos2 yLinePos2 yLinePos1 yLinePos1];
                            patch(xP, yP, 'r');
                            pos = [pos(1)+20,pos(2)];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    elseif (mColL(d)<=xLinePos1)&&(mColL(d)>xLinePos2)&&(mRowL(d)>=yLinePos1)
                        eightCounterL = eightCounterL + 1;
                        twoCounterL = 0;
                        threeCounterL = 0;
                        fourCounterL = 0;
                        fiveCounterL = 0;
                        sixCounterL = 0;
                        sevenCounterL = 0;
                        oneCounterL = 0;
                        if eightCounterL >= 4
                            xP = [xLinePos2 xLinePos1 xLinePos1 xLinePos2];
                            yP = [yLinePos1 yLinePos1 (heightL+1) (heightL+1)];
                            patch(xP, yP, 'r'); 
                            pos = [pos(1),pos(2)+20];
                            robot.mouseMove(pos(1),pos(2));
                        end
                    else
                         xP = [xLinePos2 xLinePos1 xLinePos1 xLinePos2];
                         yP = [yLinePos2 yLinePos2 yLinePos1 yLinePos1];
                         patch(xP, yP, 'r'); 

                    end
                    line(xL1,[round(2*heightR/5) round(2*heightR/5)],'Color','r');
                    line(xL1,[round(3*heightR/5) round(3*heightR/5)],'Color','r');
                    line([round(2*widthR/5) round(2*widthR/5)],yL,'Color','r');
                    line([round(3*widthR/5) round(3*widthR/5)],yL,'Color','r');
                    %Sample Grid
                    grid on;
                    handles.axes4.GridColor = 'w';
                    handles = guidata(hObject);
                end
            end
            a=toc;
            set(handles.text5, 'String', num2str(1/a));
            handles = guidata(hObject);  %Get the newest GUI data
            %             catch
            %             end
        end
    end
    elseif isTextStop
        hObject.String = 'Start';
        handles.loop = false;
        guidata(hObject, handles);
    end
end
